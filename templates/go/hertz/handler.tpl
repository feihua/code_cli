// Code generated by hertz generator.

package {{.LowerJavaName}}

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"{{.ProjectName}}/biz/model/api"
	"{{.ProjectName}}/gen/model"
	"{{.ProjectName}}/gen/query"
	"net/http"
	"strconv"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"{{.ProjectName}}/biz/model/{{.LowerJavaName}}"
)

// Add{{.JavaName}} 添加{{.Comment}}
// @router /add{{.JavaName}} [POST]
func Add{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Add{{.JavaName}}Resp)
	var err error
	var req {{.LowerJavaName}}.Add{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	//添加{{.Comment}}
	q := query.{{.UpperOriginalName}}

    item := &model.{{.UpperOriginalName}}{
    {{- range .TableColumn}}
        {{- if isContain .GoNamePublic "CreateTime"}}
        {{- else if isContain .GoNamePublic "Update"}}
        {{- else if eq .ColumnKey "PRI"}}
        {{- else}}
        {{.GoNamePublic}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
        {{- end}}
        {{- end}}
    }

    err := q.WithContext(ctx).Create(item)

	if err != nil {
		hlog.CtxErrorf(ctx, "添加{{.Comment}}异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Code = api.Code_Success
	resp.Msg = "添加{{.Comment}}成功"

	c.JSON(http.StatusOK, resp)
}

// Delete{{.JavaName}} 删除{{.Comment}}
// @router /delete{{.JavaName}} [POST]
func Delete{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Delete{{.JavaName}}Resp)
	var err error
	var req {{.LowerJavaName}}.Delete{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    q := query.{{.UpperOriginalName}}

	_, err = q.WithContext(ctx).Where(q.ID.In(req.Ids...)).Delete()
	if err != nil {
		hlog.CtxErrorf(ctx, "删除{{.Comment}}异常: %v", err)
		resp.Msg = err.Error()
		resp.Code = api.Code_DBErr
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Code = api.Code_Success
	resp.Msg = "删除{{.Comment}}成功"

	c.JSON(http.StatusOK, resp)
}

// Update{{.JavaName}} 更新{{.Comment}}
// @router /update{{.JavaName}} [POST]
func Update{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Update{{.JavaName}}Resp)
	var err error
	var req {{.LowerJavaName}}.Update{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	q := query.{{.UpperOriginalName}}.WithContext(ctx)

    // 1.根据{{.Comment}}id查询{{.Comment}}是否已存在
    _, err = q.Where(query.{{.UpperOriginalName}}.ID.Eq(req.Id)).First()

    if err != nil {
        hlog.CtxErrorf(ctx, "修改{{.Comment}}异常: %v", err)
        resp.Code = api.Code_DBErr
        resp.Msg = err.Error()
        c.JSON(http.StatusOK, resp)
        return
    }

    item := &model.{{.UpperOriginalName}}{
    {{- range .TableColumn}}
        {{- if isContain .GoNamePublic "Create"}}
        {{- else if isContain .GoNamePublic "UpdateTime"}}
        {{- else if isContain .GoNamePublic "Id"}}
        {{Replace .GoNamePublic "Id" "ID"}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
        {{- else}}
        {{.GoNamePublic}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
        {{- end}}
        {{- end}}
    }

    // 2.{{.Comment}}存在时,则直接更新{{.Comment}}
    _, err = q.Updates(item)

	if err != nil {
		hlog.CtxErrorf(ctx, "修改{{.Comment}}异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Msg = "修改{{.Comment}}成功"
	resp.Code = api.Code_Success

	c.JSON(http.StatusOK, resp)
}

// Update{{.JavaName}}Status {{.Comment}}状态
// @router /update{{.JavaName}}Status [POST]
func Update{{.JavaName}}Status(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Update{{.JavaName}}StatusResp)
	var err error
	var req {{.LowerJavaName}}.Update{{.JavaName}}StatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	q := query.{{.UpperOriginalName}}

    _, err = q.WithContext(ctx).Where(q.ID.In(req.Ids...)).Update(q.Status, req.Status)

	if err != nil {
		hlog.CtxErrorf(ctx, "修改{{.Comment}}状态异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Msg = "修改{{.Comment}}状态成功"
	resp.Code = api.Code_Success

	c.JSON(http.StatusOK, resp)
}

// Query{{.JavaName}}Detail 查询{{.Comment}}详情
// @router /query{{.JavaName}}Detail [POST]
func Query{{.JavaName}}Detail(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Query{{.JavaName}}DetailResp)
	var err error
	var req {{.LowerJavaName}}.Query{{.JavaName}}DetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	item, err  := query.{{.UpperOriginalName}}.WithContext(ctx).Where(query.{{.UpperOriginalName}}.ID.Eq(req.Id)).First()

    if err != nil {
		hlog.CtxErrorf(ctx, "查询{{.Comment}}详情异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    data := &{{.LowerJavaName}}.Query{{.JavaName}}DetailData{
    {{- range .TableColumn}}
        {{.GoNamePublic}}: item.{{- if isContain .GoNamePublic "Time"}}{{.GoNamePublic}}.Format("2006-01-02 15:04:05"), //{{.ColumnComment}}{{- else}}{{Replace .GoNamePublic "Id" "ID"}}, //{{.ColumnComment}}{{- end}}
    {{- end}}
    }
	resp.Code = api.Code_Success
	resp.Msg = "查询{{.Comment}}列表成功"
	resp.Data = data

	c.JSON(http.StatusOK, resp)
}

// Query{{.JavaName}}List 查询{{.Comment}}列表
// @router /query{{.JavaName}}List [POST]
func Query{{.JavaName}}List(ctx context.Context, c *app.RequestContext) {
	resp := new({{.LowerJavaName}}.Query{{.JavaName}}ListResp)
	var err error
	var req {{.LowerJavaName}}.Query{{.JavaName}}ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	{{- $lowerJavaName :=.OriginalName}}
    {{$lowerJavaName}} := query.{{.UpperOriginalName}}
    q := {{$lowerJavaName}}.WithContext(ctx)

    {{- range .TableColumn}}
    {{- if isContain .GoNamePublic "Create"}}
    {{- else if isContain .GoNamePublic "Update"}}
    {{- else if eq .ColumnKey "PRI"}}
    {{- else if isContain .JavaName "remark"}}
    {{- else if isContain .JavaName "sort"}}
    {{- else if isContain .JavaName "Sort"}}
    {{- else if eq .GoType "string"}}
    if len(req.{{.GoNamePublic}}) > 0 {
        q = q.Where({{$lowerJavaName}}.{{.GoNamePublic}}.Like("%" + req.{{.GoNamePublic}} + "%"))
    }
    {{- else}}
    if req.{{.GoNamePublic}} != 2 {
        q = q.Where({{$lowerJavaName}}.{{.GoNamePublic}}.Eq(req.{{.GoNamePublic}}))
    }
    {{- end}}
    {{- end}}

    result, count, err := q.FindByPage(int((req.PageNum-1)*req.PageSize), int(req.PageSize))

    if err != nil {
		hlog.CtxErrorf(ctx, "查询{{.Comment}}列表异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    var list []*{{.LowerJavaName}}.Query{{.JavaName}}ListData

    for _, item := range result {
        list = append(list, &{{.LowerJavaName}}.Query{{.JavaName}}ListData{
        {{- range .TableColumn}}
        {{.GoNamePublic}}: item.{{- if isContain .GoNamePublic "Time"}}{{.GoNamePublic}}.Format("2006-01-02 15:04:05"), //{{.ColumnComment}}{{- else}}{{Replace .GoNamePublic "Id" "ID"}}, //{{.ColumnComment}}{{- end}}
        {{- end}}

        })
    }

	resp.Code = api.Code_Success
	resp.Msg = "查询{{.Comment}}列表成功"
	resp.Data = list
	resp.Total = count

	c.JSON(http.StatusOK, resp)
}






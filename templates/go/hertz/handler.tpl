// Code generated by hertz generator.

package {{table_info.object_name}}

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"{{project_name}}/biz/model/api"
	"{{project_name}}/gen/model"
	"{{project_name}}/gen/query"
	"net/http"
	"strconv"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"{{project_name}}/biz/model/{{table_info.object_name}}"
)

// Add{{table_info.class_name}} 添加{{table_info.table_comment}}
// @router /add{{table_info.class_name}} [POST]
func Add{{table_info.class_name}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Add{{table_info.class_name}}Resp)
	var err error
	var req {{table_info.object_name}}.Add{{table_info.class_name}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	//添加{{table_info.table_comment}}
	q := query.{{table_info.class_name}}

    item := &model.{{table_info.class_name}}{
{%- for column in table_info.columns %}
    {%- if column.column_key =="PRI"  %}
    {%- elif column.proto_name is containing("create") %}
    {%- elif column.proto_name is containing("update") %}
    {%- else %}
        {{column.go_name}}: req.{{column.go_name}}, //{{column.column_comment}}
    {%- endif %}
 {%- endfor %}

    err := q.WithContext(ctx).Create(item)

	if err != nil {
		hlog.CtxErrorf(ctx, "添加{{table_info.table_comment}}异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Code = api.Code_Success
	resp.Msg = "添加{{table_info.table_comment}}成功"

	c.JSON(http.StatusOK, resp)
}

// Delete{{table_info.class_name}} 删除{{table_info.table_comment}}
// @router /delete{{table_info.class_name}} [POST]
func Delete{{table_info.class_name}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Delete{{table_info.class_name}}Resp)
	var err error
	var req {{table_info.object_name}}.Delete{{table_info.class_name}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    q := query.{{table_info.class_name}}

	_, err = q.WithContext(ctx).Where(q.ID.In(req.Ids...)).Delete()
	if err != nil {
		hlog.CtxErrorf(ctx, "删除{{table_info.table_comment}}异常: %v", err)
		resp.Msg = err.Error()
		resp.Code = api.Code_DBErr
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Code = api.Code_Success
	resp.Msg = "删除{{table_info.table_comment}}成功"

	c.JSON(http.StatusOK, resp)
}

// Update{{table_info.class_name}} 更新{{table_info.table_comment}}
// @router /update{{table_info.class_name}} [POST]
func Update{{table_info.class_name}}(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Update{{table_info.class_name}}Resp)
	var err error
	var req {{table_info.object_name}}.Update{{table_info.class_name}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	q := query.{{table_info.class_name}}.WithContext(ctx)

    // 1.根据{{table_info.table_comment}}id查询{{table_info.table_comment}}是否已存在
    _, err = q.Where(query.{{table_info.class_name}}.ID.Eq(req.Id)).First()

    if err != nil {
        hlog.CtxErrorf(ctx, "修改{{table_info.table_comment}}异常: %v", err)
        resp.Code = api.Code_DBErr
        resp.Msg = err.Error()
        c.JSON(http.StatusOK, resp)
        return
    }

    item := &model.{{table_info.class_name}}{
    {%- for column in table_info.columns %}
        {%- if column.proto_name is containing("create") %}
        {%- elif column.proto_name is containing("update") %}
        {%- else %}
            {{column.go_name}}: req.{{column.go_name}}, //{{column.column_comment}}
        {%- endif %}
    {%- endfor %}
    }

    // 2.{{table_info.table_comment}}存在时,则直接更新{{table_info.table_comment}}
    _, err = q.Updates(item)

	if err != nil {
		hlog.CtxErrorf(ctx, "修改{{table_info.table_comment}}异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Msg = "修改{{table_info.table_comment}}成功"
	resp.Code = api.Code_Success

	c.JSON(http.StatusOK, resp)
}

// Update{{table_info.class_name}}Status {{table_info.table_comment}}状态
// @router /update{{table_info.class_name}}Status [POST]
func Update{{table_info.class_name}}Status(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Update{{table_info.class_name}}StatusResp)
	var err error
	var req {{table_info.object_name}}.Update{{table_info.class_name}}StatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	q := query.{{table_info.class_name}}

    _, err = q.WithContext(ctx).Where(q.ID.In(req.Ids...)).Update(q.Status, req.Status)

	if err != nil {
		hlog.CtxErrorf(ctx, "修改{{table_info.table_comment}}状态异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	resp.Msg = "修改{{table_info.table_comment}}状态成功"
	resp.Code = api.Code_Success

	c.JSON(http.StatusOK, resp)
}

// Query{{table_info.class_name}}Detail 查询{{table_info.table_comment}}详情
// @router /query{{table_info.class_name}}Detail [POST]
func Query{{table_info.class_name}}Detail(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Query{{table_info.class_name}}DetailResp)
	var err error
	var req {{table_info.object_name}}.Query{{table_info.class_name}}DetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

	item, err  := query.{{table_info.class_name}}.WithContext(ctx).Where(query.{{table_info.class_name}}.ID.Eq(req.Id)).First()

    if err != nil {
		hlog.CtxErrorf(ctx, "查询{{table_info.table_comment}}详情异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    data := &{{table_info.object_name}}.Query{{table_info.class_name}}DetailData{
{%- for column in table_info.columns %}
    {%- if column.go_type is containing("Time") %}
    {{column.go_name}}: item.{{column.go_name}}.Format("2006-01-02 15:04:05"), //{{column.column_comment}}
    {%- else %}
    {{column.go_name}}: item.{{column.go_name}}, //{{column.column_comment}}
    {%- endif %}
{%- endfor %}

    }
	resp.Code = api.Code_Success
	resp.Msg = "查询{{table_info.table_comment}}列表成功"
	resp.Data = data

	c.JSON(http.StatusOK, resp)
}

// Query{{table_info.class_name}}List 查询{{table_info.table_comment}}列表
// @router /query{{table_info.class_name}}List [POST]
func Query{{table_info.class_name}}List(ctx context.Context, c *app.RequestContext) {
	resp := new({{table_info.object_name}}.Query{{table_info.class_name}}ListResp)
	var err error
	var req {{table_info.object_name}}.Query{{table_info.class_name}}ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.Code = api.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    {{table_info.class_name}} := query.{{table_info.class_name}}
    q := {{table_info.class_name}}.WithContext(ctx)
{%- for column in table_info.columns %}
    {%- if column.column_key =="PRI"  %}
    {%- elif column.proto_name is containing("create") %}
    {%- elif column.proto_name is containing("update") %}
    {%- elif column.proto_name is containing("remark") %}
    {%- elif column.proto_name is containing("sort") %}
    {%- else %}
        //q = q.Where({{table_info.class_name}}.{{column.go_name}}.Like("%" + req.{{column.go_name}} + "%"))
    {%- endif %}
 {%- endfor %}

    result, count, err := q.FindByPage(int((req.PageNum-1)*req.PageSize), int(req.PageSize))

    if err != nil {
		hlog.CtxErrorf(ctx, "查询{{table_info.table_comment}}列表异常: %v", err)
		resp.Code = api.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(http.StatusOK, resp)
		return
	}

    var list []*{{table_info.object_name}}.Query{{table_info.class_name}}ListData

    for _, item := range result {
        list = append(list, &{{table_info.object_name}}.Query{{table_info.class_name}}ListData{
    {%- for column in table_info.columns %}
        {%- if column.go_type is containing("Time") %}
        {{column.go_name}}: item.{{column.go_name}}.Format("2006-01-02 15:04:05"), //{{column.column_comment}}
        {%- else %}
        {{column.go_name}}: item.{{column.go_name}}, //{{column.column_comment}}
        {%- endif %}
    {%- endfor %}

        })
    }

	resp.Code = api.Code_Success
	resp.Msg = "查询{{table_info.table_comment}}列表成功"
	resp.Data = list
	resp.Total = count

	c.JSON(http.StatusOK, resp)
}






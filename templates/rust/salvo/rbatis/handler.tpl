// Code generated by https://github.com/feihua/generate-code
// author：{{.Author}}
// date：{{.CreateTime}}

use rbatis::rbdc::datetime::DateTime;
use rbatis::plugin::page::PageRequest;
use rbs::to_value;
use salvo::{Request, Response};
use salvo::prelude::*;

use crate::model::{{.RustName}}::{ {{.JavaName}} };
use crate::RB;
use crate::vo::*;
use crate::vo::{{.RustName}}_vo::*;

/**
 *添加{{.Comment}}
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn add_{{.RustName}}(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Add{{.JavaName}}Req>().await.unwrap();
    log::info!("{{.RustName}}_save params: {:?}", &item);

    let {{.RustName}} = {{.JavaName}} {
    {{- range .TableColumn}}
        {{- if eq .ColumnKey `PRI`}}
        {{.RustName}}: None
        {{- else if isContain .JavaName "createTime"}}
        {{.RustName}}: None
        {{- else if isContain .JavaName "createBy"}}
        {{.RustName}}: String::from("")
        {{- else if isContain .JavaName "updateBy"}}
        {{.RustName}}: String::from("")
        {{- else if isContain .JavaName "updateTime"}}
        {{.RustName}}: None
        {{- else}}
        {{.RustName}}: item.{{.RustName}}
        {{- end}},//{{.ColumnComment}}
    {{- end}}
    };

    let result = {{.JavaName}}::insert(&mut RB.clone(), &{{.RustName}}).await;

    res.render(Json(handle_result(result)))
}

/**
 *删除{{.Comment}}
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn delete_{{.RustName}}(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Delete{{.JavaName}}Req>().await.unwrap();
    log::info!("{{.RustName}}_delete params: {:?}", &item);

    let result = {{.JavaName}}::delete_in_column(&mut RB.clone(), "id", &item.ids).await;

    res.render(Json(handle_result(result)))
}

/**
 *更新{{.Comment}}
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn update_{{.RustName}}(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Update{{.JavaName}}Req>().await.unwrap();
    log::info!("{{.RustName}}_update params: {:?}", &item);

    let {{.RustName}} = {{.JavaName}} {
    {{- range .TableColumn}}
        {{- if eq .ColumnKey `PRI`}}
        {{.RustName}}: Some(item.{{.RustName}})
        {{- else if isContain .JavaName "createTime"}}
        {{.RustName}}: None
        {{- else if isContain .JavaName "createBy"}}
        {{.RustName}}: String::from("")
        {{- else if isContain .JavaName "updateBy"}}
        {{.RustName}}: String::from("")
        {{- else if isContain .JavaName "updateTime"}}
        {{.RustName}}: None
        {{- else}}
        {{.RustName}}: item.{{.RustName}}
        {{- end}},//{{.ColumnComment}}
    {{- end}}
    };

    let result = {{.JavaName}}::update_by_column(&mut RB.clone(), &{{.RustName}}, "id").await;

    res.render(Json(handle_result(result)))
}

/**
 *更新{{.Comment}}状态
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn update_{{.RustName}}_status(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Update{{.JavaName}}Req>().await.unwrap();
    log::info!("update_{{.RustName}}_status params: {:?}", &item);

    let rb = &mut RB.clone();
    let param = vec![to_value!(1), to_value!(1)];
    let result = rb.exec("update {{.OriginalName}} set status = ? where id in ?", param).await;

    res.render(Json(handle_result(result)))
}

/**
 *查询{{.Comment}}详情
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn query_{{.RustName}}_detail(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Query{{.JavaName}}DetailReq>().await.unwrap();
    log::info!("query_{{.RustName}}_detail params: {:?}", &item);

    let result = {{.JavaName}}::select_by_id(&mut RB.clone(), &item.id).await;

    match result {
        Ok(d) => {
            let x = d.unwrap();

            let {{.RustName}} = Query{{.JavaName}}DetailResp {
            {{- range .TableColumn}}
            {{- if eq .ColumnKey `PRI`}}
                {{.RustName}}: x.{{.RustName}}.unwrap()
            {{- else if eq .IsNullable `YES` }}
                {{.RustName}}: x.{{.RustName}}.unwrap_or_default()
            {{- else if eq .RustType `DateTime`}}
                {{.RustName}}: x.{{.RustName}}.unwrap().0.to_string()
            {{- else}}
                {{.RustName}}: x.{{.RustName}}
            {{- end}},
            {{- end}}
            };

            res.render(Json(ok_result_data({{.RustName}})))
        }
        Err(err) => {
            res.render(Json(ok_result_code(1,err.to_string())))
        }
    }

}

/**
 *查询{{.Comment}}列表
 *author：{{.Author}}
 *date：{{.CreateTime}}
 */
#[handler]
pub async fn query_{{.RustName}}_list(req: &mut Request, res: &mut Response) {
    let item = req.parse_json::<Query{{.JavaName}}ListReq>().await.unwrap();
    log::info!("query_{{.RustName}}_list params: {:?}", &item);

    let page=&PageRequest::new(item.page_no, item.page_size);
    let result = {{.JavaName}}::select_page(&mut RB.clone(), page).await;

    match result {
        Ok(d) => {
            let total = d.total;

            let mut {{.RustName}}_list_data: Vec<{{.JavaName}}ListDataResp> = Vec::new();

            for x in d.records {
                {{.RustName}}_list_data.push({{.JavaName}}ListDataResp {
                {{- range .TableColumn}}
                {{- if eq .ColumnKey `PRI`}}
                    {{.RustName}}: x.{{.RustName}}.unwrap()
                {{- else if eq .IsNullable `YES` }}
                    {{.RustName}}: x.{{.RustName}}.unwrap_or_default()
                {{- else if eq .RustType `DateTime`}}
                    {{.RustName}}: x.{{.RustName}}.unwrap().0.to_string()
                {{- else}}
                    {{.RustName}}: x.{{.RustName}}
                {{- end}},
                {{- end}}
                })
            }

            res.render(Json(ok_result_page({{.RustName}}_list_data, total)))
        }
        Err(err) => {
            res.render(Json(err_result_page(err.to_string())))
        }
    }

}
